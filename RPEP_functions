# -*- coding: utf-8 -*-
"""
Created on Thu Nov 26 22:12:36 2020

@author: Maud
"""

from psychopy import visual, data, event, core, gui
import os, pandas, math
import numpy as np

#%%The functions that can be used, importing then from this file

def create_output_file(map_name = None, file_name = None, exp_type = None): 
    """Function that creates the map & file to store the output in. Creates the experiment handler as well.
        - the working_directory is NOT changed in the end 
    Input: map_name & file_name
    Returns: my_home_directory, my_output_directory, pp_number, name, experimenthandler"""
    my_home_directory = os.getcwd()
    my_output_directory = my_home_directory + '/' + map_name
    if not os.path.isdir(my_output_directory): 
        os.mkdir(my_output_directory)
    #define the filename for the output_file (based on pp_number)
    if exp_type == 'staircase': 
        info = {'Naam': '', 'Participant nummer': 0}
    else: 
        info = {'Naam' : '', 'Gender': ['Man', 'Vrouw', 'Derde gender'], 'Leeftijd': 0, 'Handvoorkeur': ['Links', 'Rechts', 'Geen voorkeur'], 'Participant nummer': 0}
    already_exists = True
    while already_exists == True: 
        info_dialogue = gui.DlgFromDict(dictionary = info, title = 'Participant informatie')
        pp_number = info['Participant nummer']
        output_file = "/" + file_name + str(pp_number)
        if not os.path.isfile(my_output_directory + output_file + '.csv'): 
            already_exists = False
        else: 
            gui2 = gui.Dlg(title = 'Error')
            gui2.addText('Dit participant nummer bestaat al')
            gui2.show()    
    name = info['Naam']
    info.pop('Naam')
    thisExp = data.ExperimentHandler(dataFileName = my_output_directory + output_file, extraInfo = info)
    return my_home_directory, my_output_directory, pp_number, name, thisExp

# my_home_directory, my_output_directory, pp_number, name, thisExp = create_output_file(map_name = 'Test_folder', 
#                                                                                     file_name = 'Test_file')

#%% The functions that can be used, importing then from this file
"""
To be defined in the creation of the Design_array:
    - FTI x flashpos x targetpos possible combinations
    - Grating_startT (range = 500 - 600 ms)
    - Grating_FlashT (range = 750 - 1250 ms)
    - Target_positions
    - Grating_startF
    - Flash_startF
    - Target_startF
    - MaxFrames
    - block_type?
    
!: should start counting the frames from 0 (first frame = 0)
"""
#Function to create the design based on FTI x Flash_position x Targt_relative_position (= 84 trials / block)
#Returns: 
def create_design_fixed(n_blocks = 1): 
    """Function to create the design based on FTI x Flash_position x Target_relative_position (= 84 trials /block)
    Returns: Fixed_blocks, n_trials, n_blocktrials"""
    for i in range(n_blocks): 
        Target_relative_position= np.array([0, 1])      #0 = same, 1 = opposite
        Flash_position = np.array([0, 1])        #0 = left, 1 = right
        FTI = np.arange(-15, 48, 3)
        Fixed_block = np.array(np.meshgrid(FTI, Flash_position, Target_relative_position)).T.reshape(-1,3)  #shape = (84, 3)
        n_blocktrials = Fixed_block.shape[0]
        np.random.shuffle(Fixed_block)
        if i == 0: 
            Fixed_blocks = Fixed_block
        else: 
            Fixed_blocks = np.concatenate([Fixed_blocks, Fixed_block])
    n_trials = n_blocks * n_blocktrials
    return Fixed_blocks, n_blocktrials, n_trials

# Fixed_blocks, n_blocktrials, n_trials = create_design_fixed(n_blocks = 6)
# print(create_design_fixed.__class__)

#%%The functions that can be used, importing then from this file

def create_design_complete(Basic_array = None, n_trials = 1, n_blocktrials = 1, 
                           n_blocks = 1): 
    global Flash_duration, Target_duration
    """Function to complete the design_array (except for target_positions): 
        - Block_array, Basic_array, CorResp, Target_position, Grating_start_array, Grating_flash_array, 
            Flash_start_array, Target_start_array, MaxFrames_array)
        Input = Basic_array, n_trials, n_blocktrials, n_blocks
        Returns: Design_array
        Also makes global: Flash_duration & Target_duration (= 2, is the amount of frames for them to be shown)"""
    CorResp = np.array([Basic_array[:, 1] != Basic_array[:, 2]]).reshape(n_trials, 1)*1
    Target_hemifield_array = np.copy(CorResp)
    #Count the blocks
    Block_count = np.repeat(np.arange(n_blocks), n_blocktrials).reshape(n_trials, 1)
    Trial_count = np.arange(n_trials).reshape(n_trials, 1)
    Blocktrial_count = np.tile(np.arange(n_blocktrials), n_blocks).reshape(n_trials, 1)
    framerate = 1000/60         #time for 1 frame in ms (16,6666668)
    Response_time_ms = 1000
    Grating_start_limits_ms = np.array([500, 600+framerate])        #+framerate since the upper boundary isn't included
    Grating_flash_limits_ms = np.array([750, 1250+framerate])       #in calculations with np.random.randint()
    Flash_duration = 2          #Moet achteraf nog bepaald worden!!!!
    Target_duration = 2         #Moet achteraf nog bepaald worden!!!!
    Grating_start_limits = np.round(Grating_start_limits_ms/framerate, 0)
    Grating_start_limits.astype(int)
    Grating_flash_limits = np.round(Grating_flash_limits_ms / framerate, 0)
    Grating_flash_limits.astype(int)
    #Create the arrays that contain the important timings & values for each trial (random)
    Grating_start_array = np.random.randint(Grating_start_limits[0], Grating_start_limits[1], n_trials)
    Grating_flash_array = np.random.randint(Grating_flash_limits[0], Grating_flash_limits[1], n_trials)
    Flash_start_array = Grating_start_array + Grating_flash_array
    Target_start_array = Flash_start_array + Basic_array[:, 0]
    MaxFrames_array = Target_start_array + np.round(Response_time_ms/ framerate, 0)
    MaxFrames_array = MaxFrames_array.astype(int)
    
    Fixation_types = np.array(['plus', 'cross'])
    Fixation_type_array = np.concatenate([np.zeros(int(n_trials/2)), np.ones(int(n_trials/2))]).reshape(n_trials, 1)
    np.random.shuffle(Fixation_type_array)
                #0 = plus, 1 = cross
    
    Design_array = np.column_stack([Trial_count, Block_count, Blocktrial_count, Basic_array, CorResp, 
                                    Target_hemifield_array, Grating_start_array, Grating_flash_array, 
                                    Flash_start_array, Target_start_array, MaxFrames_array, Fixation_type_array])
    Design_array = Design_array.astype(int)
    return Design_array, Fixation_types

# Design_array, Fixation_options = create_design_complete(n_blocks = 6, Basic_array = Fixed_blocks, 
#                                                                 n_blocktrials = n_blocktrials, n_trials = n_trials)
#%%The functions that can be used, importing then from this file
def create_pandas_design(array = None, number = 1, used_map = None): 
    """Function to create a pandas dataframe based on an array & stores this DF in a file
    Input: array = the array that should be converted to DF, number = should be the pp_number, used_map: should be 
        the output map
    Returns: Design_DF (the dataframe)"""
    Design_DF = pandas.DataFrame.from_records(array)
    Design_DF.columns = ['TrialN', 'BlockN', 'BlocktrialN', 'FTI', 'Flash_position', 'Target_relative_position', 
                         'CorResp', 'Target_hemifield', 'Grating_start', 'Grating_Flash', 'Flash_start', 
                         'Target_start', 'MaxFrames', 'Fixation_type_bin']
    datafile_design = used_map + '\Full_design' + str(number) + '.csv'
    Design_DF.to_csv(datafile_design, index = False)
    return Design_DF
# Design_DF = create_pandas_design(array = Design_array)

#%%

def create_target_positions(size = None, sf = 1.4): 
    """Function that creates the correct positions for target that appear on the left & right side of the screen 
    Input: size = the total amount of trials, sf = spatial frequency of the gratings, for same target visibility 
        every trial
    Created variables: target_left_positions, target_right_positions
       - will be used in function target_prepare"""
    r = 1.5
    target_left_positions = np.empty([int(size/2), 2])
    target_right_positions = np.empty([int(size/2), 2])
    t = np.random.uniform(0, 1, size=size)
    u = np.random.uniform(0, 1, size=size)
    y = r*np.sqrt(t) * np.sin(2*np.pi*u)
    x = r*np.sqrt(t) * np.cos(2*np.pi*u)
    x = np.round(x, 1)
    y = np.round(y, 1)
    #Make sure the positions in the grating are always the same, so visibility is always the same     
    sf = sf
    target0_x = np.array([-sf/4*4, -sf/4*2, -sf/4*0, sf/4*2, sf/4*4]) 
    for i in range(x.shape[0]): 
        if x[i] <= np.mean(target0_x[0:2]): 
            x[i] = target0_x[0]
        elif x[i] <= np.mean(target0_x[1:3]): 
            x[i] = target0_x[1]
        elif x[i] <= np.mean(target0_x[2:4]): 
            x[i] = target0_x[2]
        elif x[i] <= np.mean(target0_x[3:5]): 
            x[i] = target0_x[3]
        else: 
            x[i] = target0_x[4]
    target_left_positions[:, 0] = x[0:int(size/2)] - 5
    target_left_positions[:, 1] = y[0:int(size/2)]
    target_right_positions[:, 0] = x[int(size/2):] + 5
    target_right_positions[:, 1] = y[int(size/2):]
    return target_left_positions, target_right_positions




